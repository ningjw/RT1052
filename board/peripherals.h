/***********************************************************************************************************************
 * This file was generated by the MCUXpresso Config Tools. Any manual edits made to this file
 * will be overwritten if the respective MCUXpresso Config Tools is used to update this file.
 **********************************************************************************************************************/

#ifndef _PERIPHERALS_H_
#define _PERIPHERALS_H_

/***********************************************************************************************************************
 * Included files
 **********************************************************************************************************************/
#include "fsl_edma.h"
#include "fsl_dmamux.h"
#include "fsl_common.h"
#include "fsl_gpio.h"
#include "fsl_clock.h"
#include "fsl_lpi2c.h"
#include "fsl_elcdif.h"
#include "fsl_lpuart.h"
#include "fsl_lpuart_edma.h"
#include "fsl_pit.h"
#include "fsl_adc.h"
#include "fsl_adc_etc.h"
#include "fsl_gpt.h"
#include "fsl_qtmr.h"

#if defined(__cplusplus)
extern "C" {
#endif /* __cplusplus */

/***********************************************************************************************************************
 * Definitions
 **********************************************************************************************************************/
/* Definitions for BOARD_InitPeripherals functional group */
/* Used DMA device. */
#define EDMA_DMA_BASEADDR DMA0
/* Associated DMAMUX device that is used for muxing of requests. */
#define EDMA_DMAMUX_BASEADDR DMAMUX
/* CORE_BOARD_MODE_KEY interrupt vector ID (number). */
#define CORE_BOARD_MODE_KEY_GPIO_COMB_0_15_IRQN GPIO1_Combined_0_15_IRQn
/* CORE_BOARD_MODE_KEY interrupt vector priority. */
#define CORE_BOARD_MODE_KEY_GPIO_COMB_0_15_IRQ_PRIORITY 5
/* CORE_BOARD_MODE_KEY interrupt handler identifier. */
#define CORE_BOARD_MODE_KEY_IRQHandler GPIO1_Combined_0_15_IRQHandler
/* CORE_BOARD_WAUP_KEY interrupt vector ID (number). */
#define CORE_BOARD_WAUP_KEY_GPIO_COMB_0_15_IRQN GPIO5_Combined_0_15_IRQn
/* CORE_BOARD_WAUP_KEY interrupt vector priority. */
#define CORE_BOARD_WAUP_KEY_GPIO_COMB_0_15_IRQ_PRIORITY 5
/* CORE_BOARD_WAUP_KEY interrupt handler identifier. */
#define CORE_BOARD_WAUP_KEY_IRQHandler GPIO5_Combined_0_15_IRQHandler
/* BOARD_InitPeripherals defines for LPI2C1 */
/* Definition of peripheral ID */
#define LPI2C1_PERIPHERAL LPI2C1
/* Definition of clock source */
#define LPI2C1_CLOCK_FREQ 60000000UL
/* Definition of peripheral ID */
#define ELCDIF_PERIPHERAL LCDIF
/* Definition of the expected display clock frequency */
#define ELCDIF_EXPECTED_DCLK_FREQ 27373500UL
/* Definition of the panel width */
#define ELCDIF_PANEL_WIDTH 800
/* Definition of the panel height */
#define ELCDIF_PANEL_HEIGHT 480
/* Definition of the RGB buffer alignment */
#define ELCDIF_RGB_BUFFER_ALIGN 64
/* eLCDIF interrupt vector ID (number). */
#define ELCDIF_LCDIF_IRQN LCDIF_IRQn
/* eLCDIF interrupt handler identifier. */
#define ELCDIF_LCDIF_IRQHANDLER LCDIF_IRQHandler
/* Definition of peripheral ID */
#define LPUART1_PERIPHERAL LPUART1
/* Definition of the clock source frequency */
#define LPUART1_CLOCK_SOURCE 80000000UL
/* LPUART1 eDMA source request. */
#define LPUART1_RX_DMA_REQUEST kDmaRequestMuxLPUART1Rx
/* Selected eDMA channel number. */
#define LPUART1_RX_DMA_CHANNEL 0
/* DMAMUX device that is used for muxing of the request. */
#define LPUART1_RX_DMAMUX_BASEADDR DMAMUX
/* Used DMA device. */
#define LPUART1_RX_DMA_BASEADDR DMA0
/* LPUART1 eDMA source request. */
#define LPUART1_TX_DMA_REQUEST kDmaRequestMuxLPUART1Tx
/* Selected eDMA channel number. */
#define LPUART1_TX_DMA_CHANNEL 1
/* DMAMUX device that is used for muxing of the request. */
#define LPUART1_TX_DMAMUX_BASEADDR DMAMUX
/* Used DMA device. */
#define LPUART1_TX_DMA_BASEADDR DMA0
/* BOARD_InitPeripherals defines for PIT */
/* Definition of peripheral ID. */
#define PIT1_PERIPHERAL PIT
/* Definition of clock source frequency. */
#define PIT1_CLK_FREQ 66000000UL
/* Definition of ticks count for channel 0. */
#define PIT1_0_TICKS 32999999U
/* PIT1 interrupt vector ID (number). */
#define PIT1_IRQN PIT_IRQn
/* PIT1 interrupt vector priority. */
#define PIT1_IRQ_PRIORITY 5
/* PIT1 interrupt handler identifier. */
#define PIT1_IRQHANDLER PIT_IRQHandler
/* BOARD_InitPeripherals defines for ADC1 */
/* Definition of peripheral ID */
#define ADC1_PERIPHERAL ADC1
/* Definition of special channel interconnected with ADC_ETC which takes real channel to be measured from ADC_ETC. */
#define ADC1_CHANNEL_DRIVEN_BY_ADC_ETC 16U
/* ADC1 interrupt vector ID (number). */
#define ADC1_IRQN ADC1_IRQn
/* ADC1 interrupt handler identifier. */
#define ADC1_IRQHANDLER ADC1_IRQHandler
/* BOARD_InitPeripherals defines for ADC_ETC */
/* Definition of peripheral ID */
#define ADC_ETC_PERIPHERAL ADC_ETC
/* Definition of the names for trigger configurations. Used as index to ADC_ETC_trigger_config array. */
enum trigger_config_names
{
  ADC_ETC_TC_0 = 0U
};
/* Definition of the names for trigger group parameter of multiple functions, like ADC_ETC_SetTriggerConfig() and ADC_ETC_SetTriggerChainConfig(). */
enum trigger_config_trigger_group_names
{
  ADC_ETC_TC_0_TG = 3U
};
/* ADC_ETC interrupt vector ID (number). */
#define ADC_ETC_ADC_ETC_0_IRQN ADC_ETC_IRQ0_IRQn
/* ADC_ETC interrupt handler identifier. */
#define ADC_ETC_0_IRQHANDLER ADC_ETC_IRQ0_IRQHandler
/* ADC_ETC interrupt vector ID (number). */
#define ADC_ETC_ADC_ETC_1_IRQN ADC_ETC_IRQ1_IRQn
/* ADC_ETC interrupt vector ID (number). */
#define ADC_ETC_ADC_ETC_2_IRQN ADC_ETC_IRQ2_IRQn
/* ADC_ETC interrupt vector ID (number). */
#define ADC_ETC_ADC_ETC_ERROR_IRQN ADC_ETC_ERROR_IRQ_IRQn
/* ADC_ETC interrupt handler identifier. */
#define ADC_ETC_ERROR_IRQHANDLER ADC_ETC_ERROR_IRQ_IRQHandler
/* Definition of peripheral ID */
#define GPT_TIMER_PERIPHERAL GPT1
/* Definition of the clock source frequency */
#define GPT_TIMER_CLOCK_SOURCE 24000000UL
/* GPT_Timer interrupt vector ID (number). */
#define GPT_TIMER_GPT_IRQN GPT1_IRQn
/* GPT_Timer interrupt handler identifier. */
#define GPT_TIMER_IRQHANDLER GPT1_IRQHandler
/* Definition of peripheral ID */
#define QUADTIME3_PERIPHERAL TMR3
/* Definition of the timer channel Channel2. */
#define QUADTIME3_CHANNEL2_CHANNEL kQTMR_Channel_2
/* Definition of the timer channel Channel3. */
#define QUADTIME3_CHANNEL3_CHANNEL kQTMR_Channel_3
/* Definition of the timer channel Channel2 clock source frequency. */
#define QUADTIME3_CHANNEL2_CLOCK_SOURCE 132000000UL
/* Definition of the timer channel Channel3 clock source frequency. */
#define QUADTIME3_CHANNEL3_CLOCK_SOURCE 132000000UL
/* QuadTime3 interrupt vector ID (number). */
#define QUADTIME3_IRQN TMR3_IRQn
/* QuadTime3 interrupt handler identifier. */
#define QUADTIME3_IRQHANDLER TMR3_IRQHandler

/***********************************************************************************************************************
 * Global variables
 **********************************************************************************************************************/
extern const edma_config_t eDMA_config;
extern const lpi2c_master_config_t LPI2C1_masterConfig;
/* RGB mode configuration */
extern const elcdif_rgb_mode_config_t eLCDIF_rgbConfig;
/* RGB buffer */
extern uint16_t eLCDIF_Buffer[2][ELCDIF_PANEL_HEIGHT][ELCDIF_PANEL_WIDTH];
extern const lpuart_config_t LPUART1_config;
extern edma_handle_t LPUART1_RX_Handle;
extern edma_handle_t LPUART1_TX_Handle;
extern lpuart_edma_handle_t LPUART1_LPUART_eDMA_Handle;
extern const pit_config_t PIT1_config;
extern const adc_config_t ADC1_config;
extern const adc_channel_config_t ADC1_channels_config[2];
extern const adc_etc_config_t ADC_ETC_config;
extern const adc_etc_trigger_config_t ADC_ETC_trigger_config[1];
extern const adc_etc_trigger_chain_config_t ADC_ETC_TC_0_chain_config[1];
extern const gpt_config_t GPT_Timer_config;
extern const qtmr_config_t QuadTime3_Channel2_config;
extern const qtmr_config_t QuadTime3_Channel3_config;

/***********************************************************************************************************************
 * Callback functions
 **********************************************************************************************************************/
/* LPUART eDMA callback function for the LPUART1 component (init. function BOARD_InitPeripherals)*/
extern void LPUART1_UserCallback(LPUART_Type *,lpuart_edma_handle_t *,status_t ,void *);

/***********************************************************************************************************************
 * Initialization functions
 **********************************************************************************************************************/
void BOARD_InitPeripherals(void);

/***********************************************************************************************************************
 * BOARD_InitBootPeripherals function
 **********************************************************************************************************************/
void BOARD_InitBootPeripherals(void);

#if defined(__cplusplus)
}
#endif

#endif /* _PERIPHERALS_H_ */
