<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\rt1052.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\rt1052.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Mon Dec 23 22:20:45 2019
<BR><P>
<H3>Maximum Stack Usage =        920 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; BOARD_InitDebugConsole &rArr; DbgConsole_Init &rArr; SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[161]">DbgConsole_SendDataReliable</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f9]">__aeabi_assert</a><BR>
 <LI><a href="#[1bb]">SerialManager_Write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f9]">__aeabi_assert</a><BR>
 <LI><a href="#[1ba]">Serial_UartWrite</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f9]">__aeabi_assert</a><BR>
 <LI><a href="#[16f]">HAL_UartSendBlocking</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f9]">__aeabi_assert</a><BR>
 <LI><a href="#[170]">LPUART_WriteBlocking</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f9]">__aeabi_assert</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[85]">ACMP1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[86]">ACMP2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[87]">ACMP3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[88]">ACMP4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[4d]">ADC1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[4e]">ADC2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[d8]">ADC_AppTask</a> from adc_app.o(i.ADC_AppTask) referenced from main.o(i.AppTaskCreate)
 <LI><a href="#[83]">ADC_ETC_ERROR_IRQ_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[80]">ADC_ETC_IRQ0_IRQHandler</a> from adc_app.o(i.ADC_ETC_IRQ0_IRQHandler) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[81]">ADC_ETC_IRQ1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[82]">ADC_ETC_IRQ2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[db]">AppTaskCreate</a> from main.o(i.AppTaskCreate) referenced from main.o(i.main)
 <LI><a href="#[d6]">BAT_AppTask</a> from battery_app.o(i.BAT_AppTask) referenced from main.o(i.AppTaskCreate)
 <LI><a href="#[41]">BEE_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[d7]">BLE_AppTask</a> from ble_app.o(i.BLE_AppTask) referenced from main.o(i.AppTaskCreate)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[c7]">CAN1_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[2e]">CAN1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[c8]">CAN2_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[2f]">CAN2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[69]">CCM_1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[6a]">CCM_2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[1d]">CORE_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[35]">CSI_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[3b]">CSU_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[1b]">CTI0_ERROR_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[1c]">CTI1_ERROR_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[4f]">DCDC_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[3c]">DCP_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[3d]">DCP_VMI_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[a6]">DMA0_DMA16_DriverIRQHandler</a> from fsl_edma.o(i.DMA0_DMA16_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[a]">DMA0_DMA16_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[b0]">DMA10_DMA26_DriverIRQHandler</a> from fsl_edma.o(i.DMA10_DMA26_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[14]">DMA10_DMA26_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[b1]">DMA11_DMA27_DriverIRQHandler</a> from fsl_edma.o(i.DMA11_DMA27_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[15]">DMA11_DMA27_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[b2]">DMA12_DMA28_DriverIRQHandler</a> from fsl_edma.o(i.DMA12_DMA28_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[16]">DMA12_DMA28_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[b3]">DMA13_DMA29_DriverIRQHandler</a> from fsl_edma.o(i.DMA13_DMA29_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[17]">DMA13_DMA29_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[b4]">DMA14_DMA30_DriverIRQHandler</a> from fsl_edma.o(i.DMA14_DMA30_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[18]">DMA14_DMA30_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[b5]">DMA15_DMA31_DriverIRQHandler</a> from fsl_edma.o(i.DMA15_DMA31_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[19]">DMA15_DMA31_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[a7]">DMA1_DMA17_DriverIRQHandler</a> from fsl_edma.o(i.DMA1_DMA17_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[b]">DMA1_DMA17_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[a8]">DMA2_DMA18_DriverIRQHandler</a> from fsl_edma.o(i.DMA2_DMA18_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[c]">DMA2_DMA18_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[a9]">DMA3_DMA19_DriverIRQHandler</a> from fsl_edma.o(i.DMA3_DMA19_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[d]">DMA3_DMA19_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[aa]">DMA4_DMA20_DriverIRQHandler</a> from fsl_edma.o(i.DMA4_DMA20_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[e]">DMA4_DMA20_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[ab]">DMA5_DMA21_DriverIRQHandler</a> from fsl_edma.o(i.DMA5_DMA21_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[f]">DMA5_DMA21_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[ac]">DMA6_DMA22_DriverIRQHandler</a> from fsl_edma.o(i.DMA6_DMA22_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[10]">DMA6_DMA22_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[ad]">DMA7_DMA23_DriverIRQHandler</a> from fsl_edma.o(i.DMA7_DMA23_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[11]">DMA7_DMA23_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[ae]">DMA8_DMA24_DriverIRQHandler</a> from fsl_edma.o(i.DMA8_DMA24_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[12]">DMA8_DMA24_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[af]">DMA9_DMA25_DriverIRQHandler</a> from fsl_edma.o(i.DMA9_DMA25_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[13]">DMA9_DMA25_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[b6]">DMA_ERROR_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[1a]">DMA_ERROR_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[da]">DbgConsole_PrintCallback</a> from fsl_debug_console.o(i.DbgConsole_PrintCallback) referenced from fsl_debug_console.o(i.DbgConsole_Printf)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[a2]">DefaultISR</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[a2]">DefaultISR</a> from startup_mimxrt1052.o(.text) referenced 87 times from startup_mimxrt1052.o(RESET)
 <LI><a href="#[8b]">ENC1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[8c]">ENC2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[8d]">ENC3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[8e]">ENC4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[d4]">ENET_1588_Timer_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[7d]">ENET_1588_Timer_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[d3]">ENET_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[7c]">ENET_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[68]">EWM_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[ce]">FLEXIO1_DriverIRQHandler</a> from fsl_flexio.o(i.FLEXIO1_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[64]">FLEXIO1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[cf]">FLEXIO2_DriverIRQHandler</a> from fsl_flexio.o(i.FLEXIO2_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[65]">FLEXIO2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[30]">FLEXRAM_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[d0]">FLEXSPI_DriverIRQHandler</a> from fsl_flexspi.o(i.FLEXSPI_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[76]">FLEXSPI_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[6b]">GPC_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[5a]">GPIO1_Combined_0_15_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[5b]">GPIO1_Combined_16_31_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[52]">GPIO1_INT0_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[53]">GPIO1_INT1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[54]">GPIO1_INT2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[55]">GPIO1_INT3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[56]">GPIO1_INT4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[57]">GPIO1_INT5_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[58]">GPIO1_INT6_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[59]">GPIO1_INT7_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[5c]">GPIO2_Combined_0_15_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[5d]">GPIO2_Combined_16_31_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[5e]">GPIO3_Combined_0_15_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[5f]">GPIO3_Combined_16_31_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[60]">GPIO4_Combined_0_15_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[61]">GPIO4_Combined_16_31_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[62]">GPIO5_Combined_0_15_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[63]">GPIO5_Combined_16_31_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[33]">GPR_IRQ_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[6e]">GPT1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[6f]">GPT2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[d9]">InactiveTmr_Callback</a> from main.o(i.InactiveTmr_Callback) referenced from main.o(i.AppTaskCreate)
 <LI><a href="#[31]">KPP_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[34]">LCDIF_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[d5]">LED_AppTask</a> from led_app.o(i.LED_AppTask) referenced from main.o(i.AppTaskCreate)
 <LI><a href="#[bf]">LPI2C1_DriverIRQHandler</a> from fsl_lpi2c.o(i.LPI2C1_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[26]">LPI2C1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[c0]">LPI2C2_DriverIRQHandler</a> from fsl_lpi2c.o(i.LPI2C2_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[27]">LPI2C2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[c1]">LPI2C3_DriverIRQHandler</a> from fsl_lpi2c.o(i.LPI2C3_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[28]">LPI2C3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[c2]">LPI2C4_DriverIRQHandler</a> from fsl_lpi2c.o(i.LPI2C4_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[29]">LPI2C4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[c3]">LPSPI1_DriverIRQHandler</a> from fsl_lpspi.o(i.LPSPI1_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[2a]">LPSPI1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[c4]">LPSPI2_DriverIRQHandler</a> from fsl_lpspi.o(i.LPSPI2_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[2b]">LPSPI2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[c5]">LPSPI3_DriverIRQHandler</a> from fsl_lpspi.o(i.LPSPI3_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[2c]">LPSPI3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[c6]">LPSPI4_DriverIRQHandler</a> from fsl_lpspi.o(i.LPSPI4_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[2d]">LPSPI4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[b7]">LPUART1_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART1_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[1e]">LPUART1_IRQHandler</a> from lpuart1.o(i.LPUART1_IRQHandler) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[b8]">LPUART2_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART2_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[1f]">LPUART2_IRQHandler</a> from ble_app.o(i.LPUART2_IRQHandler) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[b9]">LPUART3_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART3_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[20]">LPUART3_IRQHandler</a> from interrupt.o(i.LPUART3_IRQHandler) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[ba]">LPUART4_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART4_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[21]">LPUART4_IRQHandler</a> from interrupt.o(i.LPUART4_IRQHandler) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[bb]">LPUART5_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART5_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[22]">LPUART5_IRQHandler</a> from interrupt.o(i.LPUART5_IRQHandler) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[bc]">LPUART6_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART6_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[23]">LPUART6_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[bd]">LPUART7_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART7_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[24]">LPUART7_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[be]">LPUART8_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART8_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[25]">LPUART8_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[84]">PIT_IRQHandler</a> from interrupt.o(i.PIT_IRQHandler) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[47]">PMU_EVENT_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[70]">PWM1_0_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[71]">PWM1_1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[72]">PWM1_2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[73]">PWM1_3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[74]">PWM1_FAULT_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[93]">PWM2_0_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[94]">PWM2_1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[95]">PWM2_2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[96]">PWM2_3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[97]">PWM2_FAULT_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[98]">PWM3_0_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[99]">PWM3_1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[9a]">PWM3_2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[9b]">PWM3_3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[9c]">PWM3_FAULT_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[9d]">PWM4_0_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[9e]">PWM4_1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[9f]">PWM4_2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[a0]">PWM4_3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[a1]">PWM4_FAULT_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[36]">PXP_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[67]">RTWDOG_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[6d]">Reserved115_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[75]">Reserved123_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[89]">Reserved143_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[8a]">Reserved144_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[3e]">Reserved68_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[48]">Reserved78_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[50]">Reserved86_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[51]">Reserved87_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[c9]">SAI1_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[42]">SAI1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[ca]">SAI2_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[43]">SAI2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[cb]">SAI3_RX_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[44]">SAI3_RX_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[cc]">SAI3_TX_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[45]">SAI3_TX_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[77]">SEMC_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[40]">SJC_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[38]">SNVS_HP_WRAPPER_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[39]">SNVS_HP_WRAPPER_TZ_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[3a]">SNVS_LP_WRAPPER_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[cd]">SPDIF_DriverIRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[46]">SPDIF_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[6c]">SRC_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from cmsis_os2.o(i.SysTick_Handler) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[a4]">SystemInit</a> from system_mimxrt1052.o(i.SystemInit) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[49]">TEMP_LOW_HIGH_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[4a]">TEMP_PANIC_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[8f]">TMR1_IRQHandler</a> from adc_app.o(i.TMR1_IRQHandler) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[90]">TMR2_IRQHandler</a> from ble_app.o(i.TMR2_IRQHandler) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[91]">TMR3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[92]">TMR4_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[3f]">TRNG_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[32]">TSC_DIG_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[7b]">USB_OTG1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[7a]">USB_OTG2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[4b]">USB_PHY1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[4c]">USB_PHY2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[d1]">USDHC1_DriverIRQHandler</a> from fsl_usdhc.o(i.USDHC1_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[78]">USDHC1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[d2]">USDHC2_DriverIRQHandler</a> from fsl_usdhc.o(i.USDHC2_DriverIRQHandler) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[79]">USDHC2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[66]">WDOG1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[37]">WDOG2_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[7e]">XBAR1_IRQ_0_1_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[7f]">XBAR1_IRQ_2_3_IRQHandler</a> from startup_mimxrt1052.o(.text) referenced from startup_mimxrt1052.o(RESET)
 <LI><a href="#[a5]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mimxrt1052.o(.text)
 <LI><a href="#[a3]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[dd]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[dc]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[df]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[de]">vEventGroupSetBitsCallback</a> from event_groups.o(i.vEventGroupSetBitsCallback) referenced from event_groups.o(i.xEventGroupSetBitsFromISR)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[a5]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[215]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[e0]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ee]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[216]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[217]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[218]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[219]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[21a]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[20c]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[20b]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[21b]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DMA0_DMA16_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DMA1_DMA17_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DMA2_DMA18_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA3_DMA19_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA4_DMA20_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA5_DMA21_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA6_DMA22_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA7_DMA23_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMA8_DMA24_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA9_DMA25_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA10_DMA26_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA11_DMA27_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA12_DMA28_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA13_DMA29_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA14_DMA30_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA15_DMA31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>LPUART6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>LPUART7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>LPUART8_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>LPI2C1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>LPI2C2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>LPI2C3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>LPI2C4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>LPSPI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>LPSPI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>LPSPI3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>LPSPI4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SAI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SAI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SAI3_RX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SAI3_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SPDIF_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>FLEXIO1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>FLEXIO2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>FLEXSPI_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>USDHC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>USDHC2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>ENET_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>ENET_1588_Timer_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>ACMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>ACMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>ACMP3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>ACMP4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>ADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>ADC_ETC_ERROR_IRQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>ADC_ETC_IRQ1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>ADC_ETC_IRQ2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>BEE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>CAN1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c8]"></a>CAN2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>CCM_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>CCM_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CORE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CSI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CSU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>CTI0_ERROR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>CTI1_ERROR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DCDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DCP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DCP_VMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>DMA_ERROR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[a2]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1052.o(RESET)
<LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[8b]"></a>ENC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>ENC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>ENC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>ENC4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>ENET_1588_Timer_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[d3]"></a>ENET_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>EWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>FLEXRAM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>GPC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>GPIO1_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>GPIO1_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>GPIO1_INT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>GPIO1_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>GPIO1_INT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>GPIO1_INT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>GPIO1_INT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>GPIO1_INT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>GPIO1_INT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>GPIO1_INT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>GPIO2_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>GPIO2_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>GPIO3_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>GPIO3_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>GPIO4_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>GPIO4_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>GPIO5_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>GPIO5_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>GPR_IRQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>GPT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>GPT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>KPP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>LCDIF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>PMU_EVENT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>PWM1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>PWM1_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>PWM1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>PWM1_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>PWM1_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>PWM2_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>PWM2_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>PWM2_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>PWM2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>PWM2_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>PWM3_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>PWM3_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>PWM3_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>PWM3_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>PWM3_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>PWM4_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>PWM4_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>PWM4_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>PWM4_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>PWM4_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>PXP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>RTWDOG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>Reserved115_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>Reserved123_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>Reserved143_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>Reserved144_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>Reserved68_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>Reserved78_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>Reserved86_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>Reserved87_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>SAI1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[ca]"></a>SAI2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[cb]"></a>SAI3_RX_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>SAI3_TX_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>SEMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SJC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SNVS_HP_WRAPPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SNVS_HP_WRAPPER_TZ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SNVS_LP_WRAPPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>SPDIF_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>SRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TEMP_LOW_HIGH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TEMP_PANIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>TMR4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TSC_DIG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>USB_OTG1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>USB_OTG2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>USB_PHY1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USB_PHY2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>WDOG1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>WDOG2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>XBAR1_IRQ_0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>XBAR1_IRQ_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1052.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[e3]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterSetDelayTimes
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRadixNumToString
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRadixNumToString
</UL>

<P><STRONG><a name="[21c]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[1b5]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVS_HP_ConvertDatetimeToSeconds
</UL>

<P><STRONG><a name="[21d]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[21e]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_SendCmd
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[220]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_AppTask
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_WriteReg
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_ReadReg
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ETC_GetDefaultConfig
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
</UL>

<P><STRONG><a name="[222]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[10b]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_SendCmd
</UL>

<P><STRONG><a name="[10f]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_SendCmd
</UL>

<P><STRONG><a name="[19c]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART2_SendString
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
</UL>

<P><STRONG><a name="[10a]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_SendCmd
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_l2d</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[ec]"></a>__aeabi_d2lz</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dfixl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[223]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[224]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[225]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[eb]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
</UL>

<P><STRONG><a name="[1cc]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[226]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[227]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>ADC1_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, peripherals.o(i.ADC1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = ADC1_init &rArr; ADC_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetHardwareAverageConfig
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetChannelConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DoAutoCalibration
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[d8]"></a>ADC_AppTask</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, adc_app.o(i.ADC_AppTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = ADC_AppTask &rArr; LPSPI4_ReadWriteByte &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XBARA_Configuration
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI4_ReadWriteByte
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ETC_Config
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[f2]"></a>ADC_DoAutoCalibration</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, fsl_adc.o(i.ADC_DoAutoCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = ADC_DoAutoCalibration &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EnableHardwareTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_init
</UL>

<P><STRONG><a name="[102]"></a>ADC_ETC_ClearInterruptStatusFlags</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, fsl_adc_etc.o(i.ADC_ETC_ClearInterruptStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ETC_IRQ0_IRQHandler
</UL>

<P><STRONG><a name="[f5]"></a>ADC_ETC_Config</STRONG> (Thumb, 138 bytes, Stack size 64 bytes, adc_drv.o(i.ADC_ETC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = ADC_ETC_Config &rArr; ADC_ETC_SetTriggerChainConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ETC_SetTriggerConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ETC_SetTriggerChainConfig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ETC_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ETC_GetDefaultConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AppTask
</UL>

<P><STRONG><a name="[100]"></a>ADC_ETC_GetADCConversionValue</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, fsl_adc_etc.o(i.ADC_ETC_GetADCConversionValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = ADC_ETC_GetADCConversionValue &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ETC_IRQ0_IRQHandler
</UL>

<P><STRONG><a name="[fc]"></a>ADC_ETC_GetDefaultConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_adc_etc.o(i.ADC_ETC_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_ETC_GetDefaultConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ETC_Config
</UL>

<P><STRONG><a name="[80]"></a>ADC_ETC_IRQ0_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, adc_app.o(i.ADC_ETC_IRQ0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = ADC_ETC_IRQ0_IRQHandler &rArr; ADC_ETC_GetADCConversionValue &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ETC_GetADCConversionValue
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ETC_ClearInterruptStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[fd]"></a>ADC_ETC_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, fsl_adc_etc.o(i.ADC_ETC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = ADC_ETC_Init &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ETC_DoSoftwareReset
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ETC_Config
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ETC_init
</UL>

<P><STRONG><a name="[ff]"></a>ADC_ETC_SetTriggerChainConfig</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, fsl_adc_etc.o(i.ADC_ETC_SetTriggerChainConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = ADC_ETC_SetTriggerChainConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ETC_Config
</UL>

<P><STRONG><a name="[fe]"></a>ADC_ETC_SetTriggerConfig</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, fsl_adc_etc.o(i.ADC_ETC_SetTriggerConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = ADC_ETC_SetTriggerConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ETC_Config
</UL>

<P><STRONG><a name="[105]"></a>ADC_ETC_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, peripherals.o(i.ADC_ETC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = ADC_ETC_init &rArr; ADC_ETC_Init &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ETC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[f0]"></a>ADC_Init</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, fsl_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = ADC_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_init
</UL>

<P><STRONG><a name="[f3]"></a>ADC_SetChannelConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fsl_adc.o(i.ADC_SetChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = ADC_SetChannelConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_init
</UL>

<P><STRONG><a name="[f1]"></a>ADC_SetHardwareAverageConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, fsl_adc.o(i.ADC_SetHardwareAverageConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_init
</UL>

<P><STRONG><a name="[109]"></a>AT_SendCmd</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, ble_app.o(i.AT_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AT_SendCmd &rArr; xEventGroupWaitBits &rArr; vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART2_SendString
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_AppTask
</UL>

<P><STRONG><a name="[d6]"></a>BAT_AppTask</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, battery_app.o(i.BAT_AppTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = BAT_AppTask &rArr; LTC2942_SetPrescaler &rArr; LTC2942_WriteReg &rArr; LPI2C_MasterTransferBlocking &rArr; LPI2C_MasterReceive &rArr; LPI2C_MasterWaitForTxReady &rArr; LPI2C_MasterCheckAndClearError &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_SetPrescaler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_SetAnalog
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_SetALCCMode
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_SetADCMode
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_GetVoltage
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_GetTemperature
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_GetAC
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[d7]"></a>BLE_AppTask</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, ble_app.o(i.BLE_AppTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = BLE_AppTask &rArr; GPIO_PinWrite &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART2_SendString
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_SendCmd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[120]"></a>BOARD</STRONG> (Thumb, 2362 bytes, Stack size 104 bytes, pin_mux.o(i.BOARD))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = BOARD &rArr; GPIO_PinInit &rArr; GPIO_PinWrite &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XBARA_SetSignalsConnection
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinMux
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootPins
</UL>

<P><STRONG><a name="[126]"></a>BOARD_BootClockRUN</STRONG> (Thumb, 1478 bytes, Stack size 8 bytes, clock_config.o(i.BOARD_BootClockRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = BOARD_BootClockRUN &rArr; CLOCK_DisableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SwitchOsc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitSysPll
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitRcOsc24M
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitExternalClk
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitEnetPll
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitArmPll
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitVideoPll
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitUsb2Pll
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitAudioPll
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetSaiMClkClockSource
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPllBypass
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitSysPfd
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[136]"></a>BOARD_DebugConsoleSrcFreq</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lpuart1.o(i.BOARD_DebugConsoleSrcFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BOARD_DebugConsoleSrcFreq &rArr; CLOCK_GetPllFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[139]"></a>BOARD_InitBootPins</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pin_mux.o(i.BOARD_InitBootPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = BOARD_InitBootPins &rArr; BOARD &rArr; GPIO_PinInit &rArr; GPIO_PinWrite &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>BOARD_InitDebugConsole</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lpuart1.o(i.BOARD_InitDebugConsole))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = BOARD_InitDebugConsole &rArr; DbgConsole_Init &rArr; SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13c]"></a>BOARD_InitPeripherals</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, peripherals.o(i.BOARD_InitPeripherals))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = BOARD_InitPeripherals &rArr; LPSPI4_init &rArr; LPSPI_MasterInit &rArr; LPSPI_MasterSetDelayTimes &rArr; LPSPI_MasterSetDelayScaler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAMUX_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDMA_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadTimer3_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadTimer2_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadTimer1_init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT1_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART5_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART4_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART3_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART2_init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI4_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C1_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ETC_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[130]"></a>CLOCK_DeinitAudioPll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_DeinitAudioPll))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[134]"></a>CLOCK_DeinitUsb2Pll</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_DeinitUsb2Pll))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[132]"></a>CLOCK_DeinitVideoPll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_DeinitVideoPll))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[137]"></a>CLOCK_GetPllFreq</STRONG> (Thumb, 604 bytes, Stack size 48 bytes, fsl_clock.o(i.CLOCK_GetPllFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLOCK_GetPllFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>

<P><STRONG><a name="[12d]"></a>CLOCK_InitArmPll</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_InitArmPll))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[133]"></a>CLOCK_InitEnetPll</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_InitEnetPll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_InitEnetPll
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[127]"></a>CLOCK_InitExternalClk</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_InitExternalClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = CLOCK_InitExternalClk &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[128]"></a>CLOCK_InitRcOsc24M</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_InitRcOsc24M))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[12f]"></a>CLOCK_InitSysPfd</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_InitSysPfd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_InitSysPfd
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[12e]"></a>CLOCK_InitSysPll</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_InitSysPll))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[129]"></a>CLOCK_SwitchOsc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_SwitchOsc))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[a6]"></a>DMA0_DMA16_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA0_DMA16_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = DMA0_DMA16_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>DMA10_DMA26_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA10_DMA26_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = DMA10_DMA26_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>DMA11_DMA27_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA11_DMA27_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = DMA11_DMA27_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>DMA12_DMA28_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA12_DMA28_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = DMA12_DMA28_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[b3]"></a>DMA13_DMA29_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA13_DMA29_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = DMA13_DMA29_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>DMA14_DMA30_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA14_DMA30_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = DMA14_DMA30_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>DMA15_DMA31_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA15_DMA31_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = DMA15_DMA31_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>DMA1_DMA17_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA1_DMA17_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = DMA1_DMA17_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>DMA2_DMA18_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA2_DMA18_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = DMA2_DMA18_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[a9]"></a>DMA3_DMA19_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA3_DMA19_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = DMA3_DMA19_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[aa]"></a>DMA4_DMA20_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA4_DMA20_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = DMA4_DMA20_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[ab]"></a>DMA5_DMA21_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA5_DMA21_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = DMA5_DMA21_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[ac]"></a>DMA6_DMA22_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA6_DMA22_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = DMA6_DMA22_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[ad]"></a>DMA7_DMA23_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA7_DMA23_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = DMA7_DMA23_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[ae]"></a>DMA8_DMA24_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA8_DMA24_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = DMA8_DMA24_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[af]"></a>DMA9_DMA25_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_edma.o(i.DMA9_DMA25_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = DMA9_DMA25_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[13d]"></a>DMAMUX_Init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fsl_dmamux.o(i.DMAMUX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = DMAMUX_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAMUX_GetInstance
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[13b]"></a>DbgConsole_Init</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, fsl_debug_console.o(i.DbgConsole_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = DbgConsole_Init &rArr; SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenWriteHandle
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenReadHandle
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[f7]"></a>DbgConsole_Printf</STRONG> (Thumb, 70 bytes, Stack size 160 bytes, fsl_debug_console.o(i.DbgConsole_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendDataReliable
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_AppTask
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_AppTask
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAT_AppTask
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AppTask
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InactiveTmr_Callback
</UL>

<P><STRONG><a name="[161]"></a>DbgConsole_SendDataReliable</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_debug_console.o(i.DbgConsole_SendDataReliable))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + In Cycle
<LI>Call Chain = DbgConsole_SendDataReliable &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_WriteBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintCallback
</UL>

<P><STRONG><a name="[15b]"></a>EDMA_GetChannelStatusFlags</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fsl_edma.o(i.EDMA_GetChannelStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = EDMA_GetChannelStatusFlags &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA9_DMA25_DriverIRQHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA8_DMA24_DriverIRQHandler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA7_DMA23_DriverIRQHandler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA6_DMA22_DriverIRQHandler
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA5_DMA21_DriverIRQHandler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA4_DMA20_DriverIRQHandler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA3_DMA19_DriverIRQHandler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_DMA18_DriverIRQHandler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_DMA17_DriverIRQHandler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA15_DMA31_DriverIRQHandler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA14_DMA30_DriverIRQHandler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA13_DMA29_DriverIRQHandler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA12_DMA28_DriverIRQHandler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA11_DMA27_DriverIRQHandler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA10_DMA26_DriverIRQHandler
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_DMA16_DriverIRQHandler
</UL>

<P><STRONG><a name="[15c]"></a>EDMA_HandleIRQ</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, fsl_edma.o(i.EDMA_HandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA9_DMA25_DriverIRQHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA8_DMA24_DriverIRQHandler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA7_DMA23_DriverIRQHandler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA6_DMA22_DriverIRQHandler
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA5_DMA21_DriverIRQHandler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA4_DMA20_DriverIRQHandler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA3_DMA19_DriverIRQHandler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_DMA18_DriverIRQHandler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_DMA17_DriverIRQHandler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA15_DMA31_DriverIRQHandler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA14_DMA30_DriverIRQHandler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA13_DMA29_DriverIRQHandler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA12_DMA28_DriverIRQHandler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA11_DMA27_DriverIRQHandler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA10_DMA26_DriverIRQHandler
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_DMA16_DriverIRQHandler
</UL>

<P><STRONG><a name="[13e]"></a>EDMA_Init</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, fsl_edma.o(i.EDMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = EDMA_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetInstance
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[ce]"></a>FLEXIO1_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_flexio.o(i.FLEXIO1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXIO1_DriverIRQHandler &rArr; FLEXIO_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[cf]"></a>FLEXIO2_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_flexio.o(i.FLEXIO2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXIO2_DriverIRQHandler &rArr; FLEXIO_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[165]"></a>FLEXIO_CommonIRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fsl_flexio.o(i.FLEXIO_CommonIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLEXIO_CommonIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO2_DriverIRQHandler
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO1_DriverIRQHandler
</UL>

<P><STRONG><a name="[166]"></a>FLEXSPI_CheckAndClearError</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, fsl_flexspi.o(i.FLEXSPI_CheckAndClearError))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = FLEXSPI_CheckAndClearError &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXSPI_TransferHandleIRQ
</UL>

<P><STRONG><a name="[d0]"></a>FLEXSPI_DriverIRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_flexspi.o(i.FLEXSPI_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = FLEXSPI_DriverIRQHandler &rArr; FLEXSPI_TransferHandleIRQ &rArr; FLEXSPI_TransferAbort &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXSPI_TransferHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[168]"></a>FLEXSPI_TransferAbort</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fsl_flexspi.o(i.FLEXSPI_TransferAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = FLEXSPI_TransferAbort &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXSPI_TransferHandleIRQ
</UL>

<P><STRONG><a name="[167]"></a>FLEXSPI_TransferHandleIRQ</STRONG> (Thumb, 362 bytes, Stack size 32 bytes, fsl_flexspi.o(i.FLEXSPI_TransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = FLEXSPI_TransferHandleIRQ &rArr; FLEXSPI_TransferAbort &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXSPI_TransferAbort
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXSPI_CheckAndClearError
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXSPI_DriverIRQHandler
</UL>

<P><STRONG><a name="[149]"></a>GPIO2_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, peripherals.o(i.GPIO2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO2_init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[122]"></a>GPIO_PinInit</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, fsl_gpio.o(i.GPIO_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = GPIO_PinInit &rArr; GPIO_PinWrite &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSetInterruptConfig
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD
</UL>

<P><STRONG><a name="[16a]"></a>GPIO_PinSetInterruptConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, fsl_gpio.o(i.GPIO_PinSetInterruptConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinSetInterruptConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>

<P><STRONG><a name="[11d]"></a>GPIO_PinWrite</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_gpio.o(i.GPIO_PinWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = GPIO_PinWrite &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_AppTask
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_AppTask
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAT_AppTask
</UL>

<P><STRONG><a name="[16b]"></a>HAL_UartInit</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, lpuart_adapter.o(i.HAL_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = HAL_UartInit &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartInit
</UL>

<P><STRONG><a name="[16f]"></a>HAL_UartSendBlocking</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lpuart_adapter.o(i.HAL_UartSendBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = HAL_UartSendBlocking &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartWrite
</UL>

<P><STRONG><a name="[d5]"></a>LED_AppTask</STRONG> (Thumb, 492 bytes, Stack size 0 bytes, led_app.o(i.LED_AppTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = LED_AppTask &rArr; GPIO_PinWrite &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[bf]"></a>LPI2C1_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_lpi2c.o(i.LPI2C1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPI2C1_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[142]"></a>LPI2C1_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, peripherals.o(i.LPI2C1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = LPI2C1_init &rArr; LPI2C_MasterInit &rArr; LPI2C_GetCyclesForWidth &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[c0]"></a>LPI2C2_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_lpi2c.o(i.LPI2C2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPI2C2_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>LPI2C3_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_lpi2c.o(i.LPI2C3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPI2C3_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c2]"></a>LPI2C4_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_lpi2c.o(i.LPI2C4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPI2C4_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[173]"></a>LPI2C_CheckForBusyBus</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fsl_lpi2c.o(i.LPI2C_CheckForBusyBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPI2C_CheckForBusyBus
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterGetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferBlocking
</UL>

<P><STRONG><a name="[176]"></a>LPI2C_GetInstance</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fsl_lpi2c.o(i.LPI2C_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = LPI2C_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterInit
</UL>

<P><STRONG><a name="[177]"></a>LPI2C_MasterCheckAndClearError</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fsl_lpi2c.o(i.LPI2C_MasterCheckAndClearError))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = LPI2C_MasterCheckAndClearError &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterStop
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterReceive
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterWaitForTxReady
</UL>

<P><STRONG><a name="[172]"></a>LPI2C_MasterInit</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, fsl_lpi2c.o(i.LPI2C_MasterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = LPI2C_MasterInit &rArr; LPI2C_GetCyclesForWidth &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterSetBaudRate
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_GetInstance
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterReset
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterEnable
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_GetCyclesForWidth
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C1_init
</UL>

<P><STRONG><a name="[17c]"></a>LPI2C_MasterReceive</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, fsl_lpi2c.o(i.LPI2C_MasterReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = LPI2C_MasterReceive &rArr; LPI2C_MasterWaitForTxReady &rArr; LPI2C_MasterCheckAndClearError &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterCheckAndClearError
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterWaitForTxReady
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterGetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferBlocking
</UL>

<P><STRONG><a name="[17e]"></a>LPI2C_MasterSend</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, fsl_lpi2c.o(i.LPI2C_MasterSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = LPI2C_MasterSend &rArr; LPI2C_MasterWaitForTxReady &rArr; LPI2C_MasterCheckAndClearError &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterWaitForTxReady
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferBlocking
</UL>

<P><STRONG><a name="[17a]"></a>LPI2C_MasterSetBaudRate</STRONG> (Thumb, 286 bytes, Stack size 64 bytes, fsl_lpi2c.o(i.LPI2C_MasterSetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LPI2C_MasterSetBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterInit
</UL>

<P><STRONG><a name="[17f]"></a>LPI2C_MasterStop</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, fsl_lpi2c.o(i.LPI2C_MasterStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = LPI2C_MasterStop &rArr; LPI2C_MasterWaitForTxReady &rArr; LPI2C_MasterCheckAndClearError &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterCheckAndClearError
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterWaitForTxReady
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterGetStatusFlags
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferBlocking
</UL>

<P><STRONG><a name="[180]"></a>LPI2C_MasterTransferBlocking</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, fsl_lpi2c.o(i.LPI2C_MasterTransferBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = LPI2C_MasterTransferBlocking &rArr; LPI2C_MasterReceive &rArr; LPI2C_MasterWaitForTxReady &rArr; LPI2C_MasterCheckAndClearError &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterStop
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterSend
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterReceive
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CheckForBusyBus
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterWaitForTxReady
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_WriteReg
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_ReadReg
</UL>

<P><STRONG><a name="[c3]"></a>LPSPI1_DriverIRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_lpspi.o(i.LPSPI1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = LPSPI1_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c4]"></a>LPSPI2_DriverIRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_lpspi.o(i.LPSPI2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = LPSPI2_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c5]"></a>LPSPI3_DriverIRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_lpspi.o(i.LPSPI3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = LPSPI3_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[c6]"></a>LPSPI4_DriverIRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_lpspi.o(i.LPSPI4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = LPSPI4_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[fa]"></a>LPSPI4_ReadWriteByte</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, adc_drv.o(i.LPSPI4_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = LPSPI4_ReadWriteByte &rArr; LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AppTask
</UL>

<P><STRONG><a name="[148]"></a>LPSPI4_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, peripherals.o(i.LPSPI4_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = LPSPI4_init &rArr; LPSPI_MasterInit &rArr; LPSPI_MasterSetDelayTimes &rArr; LPSPI_MasterSetDelayScaler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[185]"></a>LPSPI_CheckTransferArgument</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fsl_lpspi.o(i.LPSPI_CheckTransferArgument))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = LPSPI_CheckTransferArgument &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[187]"></a>LPSPI_GetInstance</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fsl_lpspi.o(i.LPSPI_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = LPSPI_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SetDummyData
</UL>

<P><STRONG><a name="[184]"></a>LPSPI_MasterInit</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, fsl_lpspi.o(i.LPSPI_MasterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = LPSPI_MasterInit &rArr; LPSPI_MasterSetDelayTimes &rArr; LPSPI_MasterSetDelayScaler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SetDummyData
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterSetDelayTimes
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterSetBaudRate
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetInstance
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SetOnePcsPolarity
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SetMasterSlaveMode
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SetFifoWatermarks
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_Enable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI4_init
</UL>

<P><STRONG><a name="[18a]"></a>LPSPI_MasterSetBaudRate</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, fsl_lpspi.o(i.LPSPI_MasterSetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = LPSPI_MasterSetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
</UL>

<P><STRONG><a name="[18f]"></a>LPSPI_MasterSetDelayScaler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_lpspi.o(i.LPSPI_MasterSetDelayScaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = LPSPI_MasterSetDelayScaler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterSetDelayTimes
</UL>

<P><STRONG><a name="[18d]"></a>LPSPI_MasterSetDelayTimes</STRONG> (Thumb, 352 bytes, Stack size 72 bytes, fsl_lpspi.o(i.LPSPI_MasterSetDelayTimes))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = LPSPI_MasterSetDelayTimes &rArr; LPSPI_MasterSetDelayScaler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterSetDelayScaler
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
</UL>

<P><STRONG><a name="[183]"></a>LPSPI_MasterTransferBlocking</STRONG> (Thumb, 552 bytes, Stack size 80 bytes, fsl_lpspi.o(i.LPSPI_MasterTransferBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = LPSPI_MasterTransferBlocking &rArr; LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetInstance
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CheckTransferArgument
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_WriteData
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SeparateReadData
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_ReadData
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetTxFifoCount
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetStatusFlags
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetRxFifoSize
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetRxFifoCount
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_FlushFifo
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_Enable
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CombineWriteData
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI4_ReadWriteByte
</UL>

<P><STRONG><a name="[18e]"></a>LPSPI_SetDummyData</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fsl_lpspi.o(i.LPSPI_SetDummyData))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = LPSPI_SetDummyData &rArr; LPSPI_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
</UL>

<P><STRONG><a name="[b7]"></a>LPUART1_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[1e]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lpuart1.o(i.LPUART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[140]"></a>LPUART1_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, peripherals.o(i.LPUART1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = LPUART1_init &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[b8]"></a>LPUART2_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[1f]"></a>LPUART2_IRQHandler</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, ble_app.o(i.LPUART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUART2_IRQHandler &rArr; QTMR_SetTimerPeriod
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_SetTimerPeriod
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[10d]"></a>LPUART2_SendString</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ble_app.o(i.LPUART2_SendString))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPUART2_SendString &rArr; LPUART_WriteBlocking &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteBlocking
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_SendCmd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_AppTask
</UL>

<P><STRONG><a name="[144]"></a>LPUART2_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, peripherals.o(i.LPUART2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = LPUART2_init &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[b9]"></a>LPUART3_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART3_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[20]"></a>LPUART3_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, interrupt.o(i.LPUART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendByte
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[146]"></a>LPUART3_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, peripherals.o(i.LPUART3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = LPUART3_init &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[ba]"></a>LPUART4_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART4_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[21]"></a>LPUART4_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, interrupt.o(i.LPUART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendByte
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[145]"></a>LPUART4_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, peripherals.o(i.LPUART4_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = LPUART4_init &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[bb]"></a>LPUART5_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART5_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[22]"></a>LPUART5_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, interrupt.o(i.LPUART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendByte
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[147]"></a>LPUART5_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, peripherals.o(i.LPUART5_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = LPUART5_init &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[bc]"></a>LPUART6_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART6_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[bd]"></a>LPUART7_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART7_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>LPUART8_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART8_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART8_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[19a]"></a>LPUART_EnableInterrupts</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fsl_lpuart.o(i.LPUART_EnableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART5_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART4_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART3_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART2_init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_init
</UL>

<P><STRONG><a name="[16c]"></a>LPUART_GetDefaultConfig</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = LPUART_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>

<P><STRONG><a name="[19f]"></a>LPUART_GetInstance</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_lpuart.o(i.LPUART_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = LPUART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
</UL>

<P><STRONG><a name="[199]"></a>LPUART_GetStatusFlags</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_lpuart.o(i.LPUART_GetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART2_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART5_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART4_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART3_IRQHandler
</UL>

<P><STRONG><a name="[16d]"></a>LPUART_Init</STRONG> (Thumb, 560 bytes, Stack size 56 bytes, fsl_lpuart.o(i.LPUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART5_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART4_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART3_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART2_init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>

<P><STRONG><a name="[170]"></a>LPUART_WriteBlocking</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fsl_lpuart.o(i.LPUART_WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = LPUART_WriteBlocking &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART2_SendString
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
</UL>

<P><STRONG><a name="[11b]"></a>LTC2942_GetAC</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, battery_drv.o(i.LTC2942_GetAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = LTC2942_GetAC &rArr; LTC2942_ReadReg &rArr; LPI2C_MasterTransferBlocking &rArr; LPI2C_MasterReceive &rArr; LPI2C_MasterWaitForTxReady &rArr; LPI2C_MasterCheckAndClearError &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAT_AppTask
</UL>

<P><STRONG><a name="[11a]"></a>LTC2942_GetTemperature</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, battery_drv.o(i.LTC2942_GetTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = LTC2942_GetTemperature &rArr; LTC2942_ReadReg &rArr; LPI2C_MasterTransferBlocking &rArr; LPI2C_MasterReceive &rArr; LPI2C_MasterWaitForTxReady &rArr; LPI2C_MasterCheckAndClearError &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAT_AppTask
</UL>

<P><STRONG><a name="[119]"></a>LTC2942_GetVoltage</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, battery_drv.o(i.LTC2942_GetVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = LTC2942_GetVoltage &rArr; LTC2942_ReadReg &rArr; LPI2C_MasterTransferBlocking &rArr; LPI2C_MasterReceive &rArr; LPI2C_MasterWaitForTxReady &rArr; LPI2C_MasterCheckAndClearError &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAT_AppTask
</UL>

<P><STRONG><a name="[115]"></a>LTC2942_SetADCMode</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, battery_drv.o(i.LTC2942_SetADCMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = LTC2942_SetADCMode &rArr; LTC2942_WriteReg &rArr; LPI2C_MasterTransferBlocking &rArr; LPI2C_MasterReceive &rArr; LPI2C_MasterWaitForTxReady &rArr; LPI2C_MasterCheckAndClearError &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_WriteReg
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAT_AppTask
</UL>

<P><STRONG><a name="[118]"></a>LTC2942_SetALCCMode</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, battery_drv.o(i.LTC2942_SetALCCMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = LTC2942_SetALCCMode &rArr; LTC2942_WriteReg &rArr; LPI2C_MasterTransferBlocking &rArr; LPI2C_MasterReceive &rArr; LPI2C_MasterWaitForTxReady &rArr; LPI2C_MasterCheckAndClearError &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_WriteReg
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAT_AppTask
</UL>

<P><STRONG><a name="[116]"></a>LTC2942_SetAnalog</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, battery_drv.o(i.LTC2942_SetAnalog))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = LTC2942_SetAnalog &rArr; LTC2942_WriteReg &rArr; LPI2C_MasterTransferBlocking &rArr; LPI2C_MasterReceive &rArr; LPI2C_MasterWaitForTxReady &rArr; LPI2C_MasterCheckAndClearError &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_WriteReg
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAT_AppTask
</UL>

<P><STRONG><a name="[117]"></a>LTC2942_SetPrescaler</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, battery_drv.o(i.LTC2942_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = LTC2942_SetPrescaler &rArr; LTC2942_WriteReg &rArr; LPI2C_MasterTransferBlocking &rArr; LPI2C_MasterReceive &rArr; LPI2C_MasterWaitForTxReady &rArr; LPI2C_MasterCheckAndClearError &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_WriteReg
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAT_AppTask
</UL>

<P><STRONG><a name="[141]"></a>PIT1_init</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, peripherals.o(i.PIT1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = PIT1_init &rArr; PIT_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_StartTimer
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_SetTimerPeriod
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_EnableInterrupts
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[84]"></a>PIT_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, interrupt.o(i.PIT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIT_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetStatusFlags
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ClearStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[1a2]"></a>PIT_Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, fsl_pit.o(i.PIT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = PIT_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetInstance
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT1_init
</UL>

<P><STRONG><a name="[1bf]"></a>QTMR_ClearStatusFlags</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_qtmr.o(i.QTMR_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QTMR_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_IRQHandler
</UL>

<P><STRONG><a name="[1ac]"></a>QTMR_EnableInterrupts</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, fsl_qtmr.o(i.QTMR_EnableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = QTMR_EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadTimer2_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadTimer1_init
</UL>

<P><STRONG><a name="[1aa]"></a>QTMR_Init</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, fsl_qtmr.o(i.QTMR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = QTMR_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_GetInstance
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadTimer3_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadTimer2_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadTimer1_init
</UL>

<P><STRONG><a name="[19b]"></a>QTMR_SetTimerPeriod</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fsl_qtmr.o(i.QTMR_SetTimerPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QTMR_SetTimerPeriod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART2_IRQHandler
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadTimer2_init
</UL>

<P><STRONG><a name="[1ab]"></a>QTMR_SetupInputCapture</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, fsl_qtmr.o(i.QTMR_SetupInputCapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = QTMR_SetupInputCapture
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadTimer1_init
</UL>

<P><STRONG><a name="[1ae]"></a>QTMR_SetupPwm</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, fsl_qtmr.o(i.QTMR_SetupPwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QTMR_SetupPwm
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadTimer3_init
</UL>

<P><STRONG><a name="[14a]"></a>QuadTimer1_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, peripherals.o(i.QuadTimer1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = QuadTimer1_init &rArr; QTMR_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_StartTimer
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_SetupInputCapture
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[14b]"></a>QuadTimer2_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, peripherals.o(i.QuadTimer2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = QuadTimer2_init &rArr; QTMR_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_SetTimerPeriod
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[143]"></a>QuadTimer3_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, peripherals.o(i.QuadTimer3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = QuadTimer3_init &rArr; QTMR_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_StartTimer
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_SetupPwm
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[1af]"></a>RTC_Config</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rtc_drv.o(i.RTC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = RTC_Config &rArr; SNVS_HP_RTC_SetDatetime &rArr; SNVS_HP_ConvertDatetimeToSeconds &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVS_HP_RTC_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVS_HP_RTC_GetDefaultConfig
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVS_HP_RTC_SetDatetime
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b0]"></a>SNVS_HP_RTC_GetDefaultConfig</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_snvs_hp.o(i.SNVS_HP_RTC_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = SNVS_HP_RTC_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[1b1]"></a>SNVS_HP_RTC_Init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fsl_snvs_hp.o(i.SNVS_HP_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = SNVS_HP_RTC_Init &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[1b2]"></a>SNVS_HP_RTC_SetDatetime</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, fsl_snvs_hp.o(i.SNVS_HP_RTC_SetDatetime))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = SNVS_HP_RTC_SetDatetime &rArr; SNVS_HP_ConvertDatetimeToSeconds &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVS_HP_RTC_StopTimer
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVS_HP_RTC_StartTimer
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVS_HP_ConvertDatetimeToSeconds
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVS_HP_CheckDatetimeFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[15e]"></a>SerialManager_Init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, serial_manager.o(i.SerialManager_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[160]"></a>SerialManager_OpenReadHandle</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, serial_manager.o(i.SerialManager_OpenReadHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = SerialManager_OpenReadHandle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[15f]"></a>SerialManager_OpenWriteHandle</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, serial_manager.o(i.SerialManager_OpenWriteHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = SerialManager_OpenWriteHandle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[163]"></a>SerialManager_WriteBlocking</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, serial_manager.o(i.SerialManager_WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SerialManager_WriteBlocking &rArr; SerialManager_Write &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendDataReliable
</UL>

<P><STRONG><a name="[1b8]"></a>Serial_UartInit</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, serial_port_uart.o(i.Serial_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = Serial_UartInit &rArr; HAL_UartInit &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
</UL>

<P><STRONG><a name="[1ba]"></a>Serial_UartWrite</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, serial_port_uart.o(i.Serial_UartWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = Serial_UartWrite &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_StartWriting
</UL>

<P><STRONG><a name="[162]"></a>StrFormatPrintf</STRONG> (Thumb, 1576 bytes, Stack size 160 bytes, fsl_str.o(i.StrFormatPrintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRadixNumToString
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmsis_os2.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>SystemInit</STRONG> (Thumb, 480 bytes, Stack size 8 bytes, system_mimxrt1052.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[1be]"></a>SystemInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_mimxrt1052.o(i.SystemInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[8f]"></a>TMR1_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, adc_app.o(i.TMR1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR1_IRQHandler &rArr; QTMR_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_ClearStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>TMR2_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ble_app.o(i.TMR2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TMR2_IRQHandler &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBitsFromISR
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_ClearStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>USDHC1_DriverIRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_usdhc.o(i.USDHC1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USDHC1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[d2]"></a>USDHC2_DriverIRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_usdhc.o(i.USDHC2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USDHC2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1052.o(.text)
</UL>
<P><STRONG><a name="[19e]"></a>Uart_SendByte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, interrupt.o(i.Uart_SendByte))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART5_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART4_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART3_IRQHandler
</UL>

<P><STRONG><a name="[f6]"></a>XBARA_Configuration</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, adc_drv.o(i.XBARA_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = XBARA_Configuration &rArr; XBARA_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XBARA_SetSignalsConnection
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XBARA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AppTask
</UL>

<P><STRONG><a name="[1c1]"></a>XBARA_Init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fsl_xbara.o(i.XBARA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = XBARA_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XBARA_GetInstance
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XBARA_Configuration
</UL>

<P><STRONG><a name="[124]"></a>XBARA_SetSignalsConnection</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, fsl_xbara.o(i.XBARA_SetSignalsConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = XBARA_SetSignalsConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XBARA_Configuration
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD
</UL>

<P><STRONG><a name="[1cd]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_assert</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_assert.o(i.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitExternalClk
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXSPI_TransferAbort
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXSPI_CheckAndClearError
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ETC_SetTriggerConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ETC_SetTriggerChainConfig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ETC_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVS_HP_RTC_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVS_HP_RTC_GetDefaultConfig
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferBlocking
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVS_HP_RTC_SetDatetime
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ETC_GetADCConversionValue
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteBlocking
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AppTask
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetChannelConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DoAutoCalibration
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetInstance
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAMUX_GetInstance
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetInstance
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartWrite
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartInit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenWriteHandle
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenReadHandle
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Write
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterSetDelayScaler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterSetBaudRate
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetInstance
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CheckTransferArgument
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI4_DriverIRQHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI3_DriverIRQHandler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI2_DriverIRQHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI1_DriverIRQHandler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SeparateReadData
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CombineWriteData
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterSend
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterReceive
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterCheckAndClearError
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_GetInstance
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_GetCyclesForWidth
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetInstance
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVS_HP_ConvertDatetimeToSeconds
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVS_HP_CheckDatetimeFormat
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_GetInstance
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetInstance
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetInstance
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendDataReliable
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XBARA_GetInstance
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>

<P><STRONG><a name="[158]"></a>__hardfp_modf</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, modf.o(i.__hardfp_modf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_modf
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[159]"></a>__hardfp_pow</STRONG> (Thumb, 2140 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[1cb]"></a>__kernel_poly</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1c5]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1c3]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1c9]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1c6]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1ca]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[22a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[22b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[22c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1c4]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[13f]"></a>eDMA_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, peripherals.o(i.eDMA_init))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[1c8]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[a3]"></a>main</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = main &rArr; BOARD_InitDebugConsole &rArr; DbgConsole_Init &rArr; SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootPins
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysPara
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1f8]"></a>pvPortMalloc</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[211]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[1e4]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1c7]"></a>sqrt</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1d1]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[209]"></a>uxTaskResetEventItemValue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.uxTaskResetEventItemValue))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[202]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsis_os2.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[214]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsis_os2.o(i.vApplicationGetTimerTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[206]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cmsis_os2.o(i.vApplicationStackOverflowHook))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[de]"></a>vEventGroupSetBitsCallback</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, event_groups.o(i.vEventGroupSetBitsCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vEventGroupSetBitsCallback &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> event_groups.o(i.xEventGroupSetBitsFromISR)
</UL>
<P><STRONG><a name="[1d7]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[1e3]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
</UL>

<P><STRONG><a name="[1d3]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>

<P><STRONG><a name="[1d2]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
</UL>

<P><STRONG><a name="[110]"></a>vPortEnterCritical</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[114]"></a>vPortExitCritical</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[1df]"></a>vPortFree</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[20a]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1f1]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[11e]"></a>vTaskDelay</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_AppTask
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAT_AppTask
</UL>

<P><STRONG><a name="[113]"></a>vTaskDelete</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
</UL>

<P><STRONG><a name="[20e]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[1f7]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1fe]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[1fc]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[1ff]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[200]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[201]"></a>vTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tasks.o(i.vTaskRemoveFromUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskRemoveFromUnorderedEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>

<P><STRONG><a name="[1cf]"></a>vTaskStartScheduler</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ef]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[e2]"></a>vTaskSwitchContext</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[10c]"></a>xEventGroupClearBits</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, event_groups.o(i.xEventGroupClearBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xEventGroupClearBits
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_SendCmd
</UL>

<P><STRONG><a name="[11f]"></a>xEventGroupCreate</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, event_groups.o(i.xEventGroupCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_AppTask
</UL>

<P><STRONG><a name="[1fb]"></a>xEventGroupSetBits</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, event_groups.o(i.xEventGroupSetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupSetBitsCallback
</UL>

<P><STRONG><a name="[1c0]"></a>xEventGroupSetBitsFromISR</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, event_groups.o(i.xEventGroupSetBitsFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_IRQHandler
</UL>

<P><STRONG><a name="[10e]"></a>xEventGroupWaitBits</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, event_groups.o(i.xEventGroupWaitBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xEventGroupWaitBits &rArr; vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestWaitCondition
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskResetEventItemValue
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_SendCmd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_AppTask
</UL>

<P><STRONG><a name="[205]"></a>xPortStartScheduler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1bd]"></a>xPortSysTickHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f4]"></a>xQueueGenericCreate</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AppTask
</UL>

<P><STRONG><a name="[1d8]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[1e1]"></a>xQueueGenericReset</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[103]"></a>xQueueGenericSend</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ETC_IRQ0_IRQHandler
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[210]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>

<P><STRONG><a name="[1ed]"></a>xQueueReceive</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[f8]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetDisinheritPriorityAfterTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AppTask
</UL>

<P><STRONG><a name="[20f]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[111]"></a>xTaskCreate</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
</UL>

<P><STRONG><a name="[203]"></a>xTaskCreateStatic</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[1bc]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1f2]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[20d]"></a>xTaskIncrementTick</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[1de]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[212]"></a>xTaskPriorityInherit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[1f6]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1f0]"></a>xTaskResumeAll</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[112]"></a>xTimerCreate</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, timers.o(i.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
</UL>

<P><STRONG><a name="[204]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1ea]"></a>xTimerGenericCommand</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[207]"></a>xTimerPendFunctionCallFromISR</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, timers.o(i.xTimerPendFunctionCallFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBitsFromISR
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[db]"></a>AppTaskCreate</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, main.o(i.AppTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = AppTaskCreate &rArr; xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[d9]"></a>InactiveTmr_Callback</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.InactiveTmr_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = InactiveTmr_Callback &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[1ce]"></a>InitSysPara</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.InitSysPara))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19d]"></a>LPUART_ReadByte</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, interrupt.o(i.LPUART_ReadByte))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART5_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART4_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART3_IRQHandler
</UL>

<P><STRONG><a name="[1a8]"></a>PIT_ClearStatusFlags</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, interrupt.o(i.PIT_ClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
</UL>

<P><STRONG><a name="[1a7]"></a>PIT_GetStatusFlags</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, interrupt.o(i.PIT_GetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
</UL>

<P><STRONG><a name="[11c]"></a>GPIO_PinRead</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, battery_app.o(i.GPIO_PinRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = GPIO_PinRead &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAT_AppTask
</UL>

<P><STRONG><a name="[138]"></a>CLOCK_GetDiv</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lpuart1.o(i.CLOCK_GetDiv))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>

<P><STRONG><a name="[1a0]"></a>LTC2942_ReadReg</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, battery_drv.o(i.LTC2942_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = LTC2942_ReadReg &rArr; LPI2C_MasterTransferBlocking &rArr; LPI2C_MasterReceive &rArr; LPI2C_MasterWaitForTxReady &rArr; LPI2C_MasterCheckAndClearError &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferBlocking
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_SetPrescaler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_SetAnalog
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_SetALCCMode
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_SetADCMode
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_GetVoltage
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_GetTemperature
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_GetAC
</UL>

<P><STRONG><a name="[1a1]"></a>LTC2942_WriteReg</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, battery_drv.o(i.LTC2942_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = LTC2942_WriteReg &rArr; LPI2C_MasterTransferBlocking &rArr; LPI2C_MasterReceive &rArr; LPI2C_MasterWaitForTxReady &rArr; LPI2C_MasterCheckAndClearError &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferBlocking
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_SetPrescaler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_SetAnalog
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_SetALCCMode
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_SetADCMode
</UL>

<P><STRONG><a name="[12c]"></a>CLOCK_DisableClock</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, clock_config.o(i.CLOCK_DisableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = CLOCK_DisableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[12b]"></a>CLOCK_SetDiv</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, clock_config.o(i.CLOCK_SetDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = CLOCK_SetDiv &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[12a]"></a>CLOCK_SetMux</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, clock_config.o(i.CLOCK_SetMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = CLOCK_SetMux &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[131]"></a>CLOCK_SetPllBypass</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, clock_config.o(i.CLOCK_SetPllBypass))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SetPllBypass
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[135]"></a>IOMUXC_SetSaiMClkClockSource</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, clock_config.o(i.IOMUXC_SetSaiMClkClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IOMUXC_SetSaiMClkClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[106]"></a>EnableIRQ</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, peripherals.o(i.EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadTimer2_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadTimer1_init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT1_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART5_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART4_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART3_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART2_init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ETC_init
</UL>

<P><STRONG><a name="[1a4]"></a>PIT_EnableInterrupts</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, peripherals.o(i.PIT_EnableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIT_EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT1_init
</UL>

<P><STRONG><a name="[1a3]"></a>PIT_SetTimerPeriod</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, peripherals.o(i.PIT_SetTimerPeriod))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT1_init
</UL>

<P><STRONG><a name="[1a5]"></a>PIT_StartTimer</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, peripherals.o(i.PIT_StartTimer))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT1_init
</UL>

<P><STRONG><a name="[1ad]"></a>QTMR_StartTimer</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, peripherals.o(i.QTMR_StartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QTMR_StartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadTimer3_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadTimer1_init
</UL>

<P><STRONG><a name="[121]"></a>CLOCK_EnableClock</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, pin_mux.o(i.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD
</UL>

<P><STRONG><a name="[125]"></a>IOMUXC_SetPinConfig</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, pin_mux.o(i.IOMUXC_SetPinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IOMUXC_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD
</UL>

<P><STRONG><a name="[123]"></a>IOMUXC_SetPinMux</STRONG> (Thumb, 26 bytes, Stack size 20 bytes, pin_mux.o(i.IOMUXC_SetPinMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IOMUXC_SetPinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD
</UL>

<P><STRONG><a name="[1b9]"></a>SerialManager_StartWriting</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, serial_manager.o(i.SerialManager_StartWriting))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SerialManager_StartWriting &rArr; Serial_UartWrite &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Write
</UL>

<P><STRONG><a name="[1bb]"></a>SerialManager_Write</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, serial_manager.o(i.SerialManager_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = SerialManager_Write &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_StartWriting
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_WriteBlocking
</UL>

<P><STRONG><a name="[16e]"></a>HAL_UartGetStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpuart_adapter.o(i.HAL_UartGetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>

<P><STRONG><a name="[fb]"></a>ADC_EnableHardwareTrigger</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_adc.o(i.ADC_EnableHardwareTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DoAutoCalibration
</UL>

<P><STRONG><a name="[107]"></a>ADC_GetInstance</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_adc.o(i.ADC_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = ADC_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[108]"></a>CLOCK_ControlGate</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fsl_adc.o(i.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[104]"></a>ADC_ETC_DoSoftwareReset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_adc_etc.o(i.ADC_ETC_DoSoftwareReset))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ETC_Init
</UL>

<P><STRONG><a name="[156]"></a>CLOCK_GetOscFreq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetOscFreq))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>

<P><STRONG><a name="[14c]"></a>CLOCK_ControlGate</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fsl_dmamux.o(i.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAMUX_Init
</UL>

<P><STRONG><a name="[15d]"></a>DMAMUX_GetInstance</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fsl_dmamux.o(i.DMAMUX_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = DMAMUX_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAMUX_Init
</UL>

<P><STRONG><a name="[14d]"></a>CLOCK_ControlGate</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fsl_edma.o(i.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Init
</UL>

<P><STRONG><a name="[164]"></a>EDMA_GetInstance</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fsl_edma.o(i.EDMA_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = EDMA_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Init
</UL>

<P><STRONG><a name="[169]"></a>GPIO_GetInstance</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_gpio.o(i.GPIO_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = GPIO_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>

<P><STRONG><a name="[14e]"></a>CLOCK_ControlGate</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fsl_lpi2c.o(i.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[154]"></a>CLOCK_EnableClock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_lpi2c.o(i.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterInit
</UL>

<P><STRONG><a name="[171]"></a>LPI2C_CommonIRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_lpi2c.o(i.LPI2C_CommonIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPI2C_CommonIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C4_DriverIRQHandler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C3_DriverIRQHandler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C2_DriverIRQHandler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C1_DriverIRQHandler
</UL>

<P><STRONG><a name="[175]"></a>LPI2C_GetCyclesForWidth</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, fsl_lpi2c.o(i.LPI2C_GetCyclesForWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = LPI2C_GetCyclesForWidth &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterInit
</UL>

<P><STRONG><a name="[178]"></a>LPI2C_MasterClearStatusFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_lpi2c.o(i.LPI2C_MasterClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferBlocking
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterStop
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterCheckAndClearError
</UL>

<P><STRONG><a name="[17b]"></a>LPI2C_MasterEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_lpi2c.o(i.LPI2C_MasterEnable))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterInit
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterSetBaudRate
</UL>

<P><STRONG><a name="[181]"></a>LPI2C_MasterGetFifoCounts</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_lpi2c.o(i.LPI2C_MasterGetFifoCounts))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterWaitForTxReady
</UL>

<P><STRONG><a name="[174]"></a>LPI2C_MasterGetStatusFlags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_lpi2c.o(i.LPI2C_MasterGetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterStop
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterReceive
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CheckForBusyBus
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterWaitForTxReady
</UL>

<P><STRONG><a name="[179]"></a>LPI2C_MasterReset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_lpi2c.o(i.LPI2C_MasterReset))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterInit
</UL>

<P><STRONG><a name="[17d]"></a>LPI2C_MasterWaitForTxReady</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, fsl_lpi2c.o(i.LPI2C_MasterWaitForTxReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = LPI2C_MasterWaitForTxReady &rArr; LPI2C_MasterCheckAndClearError &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterCheckAndClearError
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterGetStatusFlags
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterGetFifoCounts
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferBlocking
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterStop
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterSend
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterReceive
</UL>

<P><STRONG><a name="[14f]"></a>CLOCK_ControlGate</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fsl_lpspi.o(i.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[155]"></a>CLOCK_EnableClock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_lpspi.o(i.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = CLOCK_EnableClock &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
</UL>

<P><STRONG><a name="[193]"></a>LPSPI_ClearStatusFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_lpspi.o(i.LPSPI_ClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[186]"></a>LPSPI_CombineWriteData</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, fsl_lpspi.o(i.LPSPI_CombineWriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = LPSPI_CombineWriteData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[182]"></a>LPSPI_CommonIRQHandler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fsl_lpspi.o(i.LPSPI_CommonIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPSPI_CommonIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI4_DriverIRQHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI3_DriverIRQHandler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI2_DriverIRQHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI1_DriverIRQHandler
</UL>

<P><STRONG><a name="[18c]"></a>LPSPI_Enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_lpspi.o(i.LPSPI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
</UL>

<P><STRONG><a name="[192]"></a>LPSPI_FlushFifo</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpspi.o(i.LPSPI_FlushFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPSPI_FlushFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[198]"></a>LPSPI_GetRxFifoCount</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_lpspi.o(i.LPSPI_GetRxFifoCount))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[191]"></a>LPSPI_GetRxFifoSize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_lpspi.o(i.LPSPI_GetRxFifoSize))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[190]"></a>LPSPI_GetStatusFlags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_lpspi.o(i.LPSPI_GetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[194]"></a>LPSPI_GetTxFifoCount</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_lpspi.o(i.LPSPI_GetTxFifoCount))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[196]"></a>LPSPI_ReadData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_lpspi.o(i.LPSPI_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[197]"></a>LPSPI_SeparateReadData</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, fsl_lpspi.o(i.LPSPI_SeparateReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = LPSPI_SeparateReadData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[18b]"></a>LPSPI_SetFifoWatermarks</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_lpspi.o(i.LPSPI_SetFifoWatermarks))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPSPI_SetFifoWatermarks
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
</UL>

<P><STRONG><a name="[188]"></a>LPSPI_SetMasterSlaveMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_lpspi.o(i.LPSPI_SetMasterSlaveMode))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
</UL>

<P><STRONG><a name="[189]"></a>LPSPI_SetOnePcsPolarity</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fsl_lpspi.o(i.LPSPI_SetOnePcsPolarity))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPSPI_SetOnePcsPolarity
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
</UL>

<P><STRONG><a name="[195]"></a>LPSPI_WriteData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_lpspi.o(i.LPSPI_WriteData))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>

<P><STRONG><a name="[150]"></a>CLOCK_ControlGate</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fsl_lpuart.o(i.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
</UL>

<P><STRONG><a name="[151]"></a>CLOCK_ControlGate</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fsl_pit.o(i.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
</UL>

<P><STRONG><a name="[1a6]"></a>PIT_GetInstance</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fsl_pit.o(i.PIT_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = PIT_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
</UL>

<P><STRONG><a name="[152]"></a>CLOCK_ControlGate</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fsl_qtmr.o(i.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_Init
</UL>

<P><STRONG><a name="[1a9]"></a>QTMR_GetInstance</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_qtmr.o(i.QTMR_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = QTMR_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_Init
</UL>

<P><STRONG><a name="[1b3]"></a>SNVS_HP_CheckDatetimeFormat</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, fsl_snvs_hp.o(i.SNVS_HP_CheckDatetimeFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = SNVS_HP_CheckDatetimeFormat &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVS_HP_RTC_SetDatetime
</UL>

<P><STRONG><a name="[1b4]"></a>SNVS_HP_ConvertDatetimeToSeconds</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, fsl_snvs_hp.o(i.SNVS_HP_ConvertDatetimeToSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = SNVS_HP_ConvertDatetimeToSeconds &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVS_HP_RTC_SetDatetime
</UL>

<P><STRONG><a name="[1b7]"></a>SNVS_HP_RTC_StartTimer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_snvs_hp.o(i.SNVS_HP_RTC_StartTimer))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVS_HP_RTC_SetDatetime
</UL>

<P><STRONG><a name="[1b6]"></a>SNVS_HP_RTC_StopTimer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_snvs_hp.o(i.SNVS_HP_RTC_StopTimer))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVS_HP_RTC_SetDatetime
</UL>

<P><STRONG><a name="[153]"></a>CLOCK_ControlGate</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fsl_xbara.o(i.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XBARA_Init
</UL>

<P><STRONG><a name="[1c2]"></a>XBARA_GetInstance</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fsl_xbara.o(i.XBARA_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = XBARA_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XBARA_Init
</UL>

<P><STRONG><a name="[da]"></a>DbgConsole_PrintCallback</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fsl_debug_console.o(i.DbgConsole_PrintCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = DbgConsole_PrintCallback &rArr; DbgConsole_SendDataReliable &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendDataReliable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(i.DbgConsole_Printf)
</UL>
<P><STRONG><a name="[157]"></a>ConvertFloatRadixNumToString</STRONG> (Thumb, 430 bytes, Stack size 120 bytes, fsl_str.o(i.ConvertFloatRadixNumToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_modf
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
</UL>

<P><STRONG><a name="[15a]"></a>ConvertRadixNumToString</STRONG> (Thumb, 332 bytes, Stack size 88 bytes, fsl_str.o(i.ConvertRadixNumToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ConvertRadixNumToString &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
</UL>

<P><STRONG><a name="[208]"></a>prvTestWaitCondition</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, event_groups.o(i.prvTestWaitCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvTestWaitCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[1f9]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1fa]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[dc]"></a>prvTaskExitError</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[1db]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[1dd]"></a>prvCopyDataToQueue</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[213]"></a>prvGetDisinheritPriorityAfterTimeout</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, queue.o(i.prvGetDisinheritPriorityAfterTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[1e0]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>

<P><STRONG><a name="[1e7]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[1e8]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1f5]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[1d0]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
</UL>

<P><STRONG><a name="[1d4]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[1d9]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[1da]"></a>prvDeleteTCB</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[dd]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[1e2]"></a>prvInitialiseNewTask</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[1d5]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1fd]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[1d6]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[1f4]"></a>prvGetNextExpireTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[1e5]"></a>prvInitialiseNewTimer</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, timers.o(i.prvInitialiseNewTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[1e6]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[1e9]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[1eb]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[1ee]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[1ec]"></a>prvSampleTimeNow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[1f3]"></a>prvSwitchTimerLists</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[df]"></a>prvTimerTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
